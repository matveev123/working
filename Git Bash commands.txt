Команды в Git Bash консоли
clear — Очистить консоль

Навигация
pwd — Показать текущий каталог
ls - Показать файлы в данной папке, кроме скрытых
ls -f — Показать файлы в данной папке, включая и скрытые
cd c:/ — Перейти в конкретный каталог
cd - — Вернуться назад
cd .. — Выйти на 1 уровень вверх
cd ../.. — Выйти на 2 уровня вверх

Создание каталогов
mkdir — Создать папку
cd !$ — Перейти в только что созданную папку
mkdir -p {app1,app2} — Создать сразу несколько папок
mkdir -p app/{css,js} — Создать сразу несколько вложенных папок

Создание файлов
touch index.html — Создать файл index.html
touch app/{css/main.css,js/main.js,index.html} — Создать сразу несколько файлов, никаких лишних пробелов быть не должно

Удаление файлов
touch — позволяет создавать файлы
rm test — Удалить пустую папку test
rm -r test — Удалить папку test с файлами внутри неё

Перемещение файлов
mv app1/*.* app2 — Переместить все файлы из папки app1 в папку app2


git checkout master
git add .
git commit -m "Fix network bug"
git branch patch-1
# `patch-1` branch is created containing the commit "Fix network bug"
git reset HEAD~1 --hard # Remove the commit from `master`
git checkout patch-1

_____________________________________________________________________________________
Если вдруг закоммитил в master, а нужно было закоммитить в отдельную ветку, то:
1. создаем новую ветку в текущем состоянии, в неё попадёт ошибочный коммит:
git branch feature
2. откатываем ветку master на один коммит назад:
git reset --hard HEAD~1
Если ветка feature уже существует, то:
1. нужно сначала намерджить в неё master:
git checkout feature
git merge master
2. а затем откатить master:
git checkout master
git reset --hard HEAD~1 # or commit SHA1